@page "/"
@using BlazorBitcoinApp.Dtos
@using Plotly.Blazor;
@using Plotly.Blazor.Traces;

@inject Services.IBitcoinService BitcoinService;

<PageTitle>BlazorBitcoin</PageTitle>

<h1>Valor de fechamento BITCOIN por dia</h1>

@code {
    private List<BitcoinDataDTO> foreCasts;
    private DateTime startdDate;

    PlotlyChart chart;
    Config config = new Config()
        {
            Responsive = true
        };

    Layout layout;
    decimal yAxisMax;
    IList<ITrace> data = new List<ITrace>();

    private async Task LoadChartData()
    {
        if (foreCasts.Count > 0)
        {
            var currentCloseValueMax = (decimal)foreCasts.Max(f => f.CloseValue);
            if (currentCloseValueMax > yAxisMax)
                yAxisMax = Convert.ToInt64(currentCloseValueMax + (currentCloseValueMax * 0.3m));
        }
        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Lines | Plotly.Blazor.Traces.ScatterLib.ModeFlag.Markers,
                XAxis = "Dia",
                YAxis = "Fechamento",
                X = foreCasts.Select(f => (object)f.Day.ToString("dd/MM/yyyy")).ToList(),
                Y = foreCasts.Select(f => (object)f.CloseValue).ToList()
            }
        };
        layout = new Layout()
        {
            Margin = new Plotly.Blazor.LayoutLib.Margin()
            {
                Pad = 10
            },
            YAxis = new List<Plotly.Blazor.LayoutLib.YAxis>()
            {
                new Plotly.Blazor.LayoutLib.YAxis()
                {
                    Range = new List<object> { 0, yAxisMax },
                }
            }
        };
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        yAxisMax = 60000;
        startdDate = DateTime.Now.AddDays(-7);
        foreCasts = await BitcoinService.FindByDate(startdDate);
        await LoadChartData();
    }

    private async Task ChangeDay(DateTime startDateChanged)
    {
        startdDate = startDateChanged;
        foreCasts = await BitcoinService.FindByDate(startdDate);
        await LoadChartData();
        await chart.React();
    }
}